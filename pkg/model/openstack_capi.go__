/*
Copyright 2022 Acornsoft Authors. All right reserved.
*/
package model

// OpenstackCAPI - CAPI Provider for openstack
type OpenstackCAPI struct {
	OpenstackCloud                     string   `json:"openstack_cloud"`
	ClusterName                        string   `json:"name"`           // 화면 연계? (Cluster Name)
	Namespace                          string   `json:"namespace"`      // 화면 연계? (NodeSet 정보, Master/Worker 다른 경우는?) "default"
	LocalHostName                      string   `json:"local_hostname"` // "{{ local_hostname }}" # self binding
	KubernetesVersion                  string   `json:"version"`
	PodCidr                            string   `json:"pod_cidr"`
	NodeCidr                           string   `json:"node_cidr"` // 화면 연계 필요
	ServiceCidr                        string   `json:"svc_cidr"`
	ServiceDomain                      string   `json:"svc_domain"` // 화면 연계 필요, "cluster.local"
	OpenstackCloudCACertB64            string   `json:"openstack_cloud_cacert_b64"`
	OpenstackCloudYamlB64              string   `json:"openstack_cloud_yaml_b64"`
	OpenstackClusterProviderConfB64    string   `json:"openstack_cloud_provider_conf_b64"`
	OpenstackFailureDomain             string   `json:"failure_domain"` // "nova"
	OpenstackDNSNameServers            string   `json:"dns_nameservers"`
	OpenstackExternalNetworkID         string   `json:"external_network_id"` // "public"
	OpenstackControlPlaneMachineFlavor string   `json:"master_flavor"`
	OpenstackNodeMahineFlavor          string   `json:"worker_flavor"`
	OpenstackImageName                 string   `json:"image_name"`
	OpenstackSSHKeyName                string   `json:"ssh_key_name"`
	APIServerFloatingIP                string   `json:"api_server_floating_ip"`
	UseExternalETCD                    bool     `json:"use_external_etcd"`
	ETCDEndpoints                      []string `json:"endpoints"`
	ETCDCAFile                         string   `json:"ca_file"`
	ETCDCertFile                       string   `json:"cert_file"`
	ETCDKeyFile                        string   `json:"key_file"`
	UseBastionHost                     bool     `json:"use_bastion_host"`
	BastionFlavor                      string   `json:"bastion_flavor"`
	BastionImageName                   string   `json:"bastion_image_name"`
	BastionSSHKeyName                  string   `json:"bastion_ssh_key_name"`
	BastionFloatingIP                  string   `json:"bastion_floating_ip"`
	ControlPlaneMachineCount           int      `json:"master_node_count"`
	WorkerMachineCount                 int      `json:"worker_node_count"`
}

// 사용여부
// StorageClass

// FromTable - Cluster, NodeSet 테이블 정보를 설정
func (osc *OpenstackCAPI) FromTable(clusterTable *OpenstackClusterTable, nodeTables []*NodeSetTable) {
	osc.OpenstackCloud                     = clusterTable.OpenstackInfo.Cloud
	osc.ClusterName                        = clusterTable.Name
	//TODO: Namespace는 입력을 어떤 수준(Cluster or NodeSet)에서 받아야 하며, 동일한 값이어야 하는지? 노드마다 다르다면 YAML에는 어떻게 설정되는지.
	osc.Namespace                          = clusterTable.string   `json:"namespace"`      // 화면 연계? (NodeSet 정보, Master/Worker 다른 경우는?) "default"
	osc.LocalHostName                      = clusterTable.string   `json:"local_hostname"` // "{{ local_hostname }}" # self binding
	osc.KubernetesVersion                  = clusterTable.string   `json:"version"`
	osc.PodCidr                            = clusterTable.string   `json:"pod_cidr"`
	osc.NodeCidr                           = clusterTable.string   `json:"node_cidr"` // 화면 연계 필요
	osc.ServiceCidr                        = clusterTable.string   `json:"svc_cidr"`
	osc.ServiceDomain                      = clusterTable.string   `json:"svc_domain"` // 화면 연계 필요, "cluster.local"
	osc.OpenstackCloudCACertB64            = clusterTable.string   `json:"openstack_cloud_cacert_b64"`
	osc.OpenstackCloudYamlB64              = clusterTable.string   `json:"openstack_cloud_yaml_b64"`
	osc.OpenstackClusterProviderConfB64    = clusterTable.string   `json:"openstack_cloud_provider_conf_b64"`
	osc.OpenstackFailureDomain             = clusterTable.string   `json:"failure_domain"` // "nova"
	osc.OpenstackDNSNameServers            = clusterTable.string   `json:"dns_nameservers"`
	osc.OpenstackExternalNetworkID         = clusterTable.string   `json:"external_network_id"` // "public"
	osc.OpenstackControlPlaneMachineFlavor = clusterTable.string   `json:"master_flavor"`
	osc.OpenstackNodeMahineFlavor          = clusterTable.string   `json:"worker_flavor"`
	osc.OpenstackImageName                 = clusterTable.string   `json:"image_name"`
	osc.OpenstackSSHKeyName                = clusterTable.string   `json:"ssh_key_name"`
	osc.APIServerFloatingIP                = clusterTable.string   `json:"api_server_floating_ip"`
	osc.UseExternalETCD                    = clusterTable.bool     `json:"use_external_etcd"`
	osc.ETCDEndpoints                      = clusterTable.[]string `json:"endpoints"`
	osc.ETCDCAFile                         = clusterTable.string   `json:"ca_file"`
	osc.ETCDCertFile                       = clusterTable.string   `json:"cert_file"`
	osc.ETCDKeyFile                        = clusterTable.string   `json:"key_file"`
	osc.UseBastionHost                     = clusterTable.bool     `json:"use_bastion_host"`
	osc.BastionFlavor                      = clusterTable.string   `json:"bastion_flavor"`
	osc.BastionImageName                   = clusterTable.string   `json:"bastion_image_name"`
	osc.BastionSSHKeyName                  = clusterTable.string   `json:"bastion_ssh_key_name"`
	osc.BastionFloatingIP                  = clusterTable.string   `json:"bastion_floating_ip"`
	osc.ControlPlaneMachineCount           = clusterTable.int      `json:"master_node_count"`
	osc.WorkerMachineCount                 = clusterTable.int      `json:"worker_node_count"`
}

// FromSet - OpenstackClusterSet 정보에서 설정
func (osc *OpenstackCAPI) FromSet(set *OpenstackClusterSet) {

}
